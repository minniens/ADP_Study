import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('27_problem1.csv')
df.head()

df.info()

df.describe()

# Boxplot 그리기
import seaborn as sns
plt.figure(figsize=(6, 4))
sns.boxplot(data=df.iloc[:, 1:])
plt.xticks(rotation=45)  # x축 레이블 회전
plt.show()

plt.figure(figsize=(12, 5))
df_subset = df.loc[:, 'V1':'V17']
sns.boxplot(data=df_subset)
plt.xticks(rotation=45)  # x축 레이블 회전
plt.show()

sns.boxplot(data=df.loc[:, 'V1':'V17'])
plt.show()

# Heatmap 그리기
corr_matrix = df.corr()
plt.figure(figsize=(6, 4))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('corr')
plt.show()

clss = df['Class'].value_counts()
print(clss)
plt.figure(figsize=(3, 3))
plt.bar(clss.index, clss.values)

#StdScaler 사용 후 Heatmap 다시 그려봤으나 차이는 모르겠음.
#from sklearn.preprocessing import StandardScaler
#df_std = StandardScaler().fit_transform(df.loc[:, 'V1':'Amount'])
#pd.DataFrame(df_std).head()
#df_std_class = pd.concat([pd.DataFrame(df_std), df['Class']], axis=1)
#corr_matrix = df_std_class.corr()
#plt.figure(figsize=(6, 4))
#sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')
#plt.title('corr')
#plt.show()

# 모든 변수 StdScaler 후 PCA 시행
#from sklearn.decomposition import PCA
#pca = PCA(n_components =18) 
#pca_fit = pca.fit(df_std)
#print(pca.singular_values_)
#print(pca.explained_variance_ratio_)
#import matplotlib.pyplot as plt
#plt.title('Scree Plot')
#plt.xlabel('N')
#plt.ylabel('Variances')
#plt.plot(pca.explained_variance_ratio_, 'o-')
#plt.show()
#print((pca.explained_variance_ratio_[:3].sum())*100, (pca.explained_variance_ratio_[:8].sum())*100)

## Amount 변수만 StdSclaer 시행
from sklearn.preprocessing import StandardScaler
df['Amount_std'] = StandardScaler().fit_transform(df[['Amount']])
df.head() 

features = df.columns.drop(['Time', 'Amount', 'Class'])
features

from sklearn.decomposition import PCA
pca = PCA(n_components =18) 
pca_fit = pca.fit(df[features])

print(pca.singular_values_)
print(pca.explained_variance_ratio_)

import matplotlib.pyplot as plt

plt.title('Scree Plot')
plt.xlabel('N of components')
plt.ylabel('Cumulative Explained Variance')
plt.plot(pca.explained_variance_ratio_, 'o-')
plt.show()

print((pca.explained_variance_ratio_[:3].sum())*100, (pca.explained_variance_ratio_[:8].sum())*100)

#버전 호환 안돼서 업그레이드
#pip install --upgrade scikit-learn
#pip install --upgrade imbalanced-learn

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import RocCurveDisplay
from sklearn.model_selection import train_test_split
X= df[features]
y = df['Class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 22)
clf = RandomForestClassifier(random_state=22)
clf.fit(X_train, y_train)
y_pred_proba = clf.predict_proba(X_test)[:, 1]
roc_display = RocCurveDisplay.from_estimator(clf, X_test, y_test)

import imblearn.over_sampling
from imblearn.over_sampling import RandomOverSampler
X_resampled, y_resampled = RandomOverSampler(random_state=0).fit_resample(X_train, y_train)
clf_re = RandomForestClassifier(random_state=0)
clf_re.fit(X_resampled, y_resampled)
y_pred_proba = clf_re.predict_proba(X_test)[:, 1]
roc_display = RocCurveDisplay.from_estimator(clf_re, X_test, y_test)


from imblearn.over_sampling import SMOTE
sm = SMOTE(k_neighbors=5, random_state = 2222)
X_resampled_smote, y_resampled_smote = sm.fit_resample(X_train, y_train)
clf_sm = RandomForestClassifier(random_state=2222)
clf_sm.fit(X_resampled, y_resampled)
y_pred_proba = clf_sm.predict_proba(X_test)[:, 1]
roc_display = RocCurveDisplay.from_estimator(clf_sm, X_test, y_test)

from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, roc_curve
